  import 'dart:async';
  import 'dart:convert';
  import 'package:stomp_dart_client/stomp_dart_client.dart';

  // ƒê·ªãnh nghƒ©a ki·ªÉu callback cho c√°c s·ª± ki·ªán nh·∫≠n tin nh·∫Øn v√† thay ƒë·ªïi tr·∫°ng th√°i k·∫øt n·ªëi
  typedef OnMessageReceived = void Function(Map<String, dynamic> message);
  typedef OnConnectionChange = void Function(bool isConnected);

  class WebSocketService {
    late StompClient stompClient; // ƒê·ªëi t∆∞·ª£ng qu·∫£n l√Ω k·∫øt n·ªëi WebSocket
    final String jwtToken; // JWT Token ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng
    final String userId; // ID c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
    final OnMessageReceived onMessageReceived; // Callback khi nh·∫≠n tin nh·∫Øn
    final OnConnectionChange onConnectionChange; // Callback khi tr·∫°ng th√°i k·∫øt n·ªëi thay ƒë·ªïi
    bool _isConnected = false; // Tr·∫°ng th√°i k·∫øt n·ªëi WebSocket

    // Constructor c·ªßa class, y√™u c·∫ßu truy·ªÅn v√†o token, userId, v√† c√°c callback
    WebSocketService({
      required this.jwtToken,
      required this.userId,
      required this.onMessageReceived,
      required this.onConnectionChange,
    });

    // H√†m kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket
    void connect() {
      stompClient = StompClient(
        config: StompConfig(
          url: 'ws://https://backend-healthcare-up0d.onrender.com/notifications/websocket', // URL WebSocket c·ªßa server
          onConnect: _onConnect, // G·ªçi khi k·∫øt n·ªëi th√†nh c√¥ng
          beforeConnect: () async {
            print('Waiting to connect...');
            await Future.delayed(const Duration(milliseconds: 200));
            print('Connecting...');
          },
          stompConnectHeaders: {
            'Authorization': 'Bearer $jwtToken', // G·ª≠i token trong header ƒë·ªÉ x√°c th·ª±c
          },
          webSocketConnectHeaders: {
            'Authorization': 'Bearer $jwtToken', // Header x√°c th·ª±c cho WebSocket
          },
          onWebSocketError: (dynamic error) {
            print('üî¥ WebSocket Error: $error'); // X·ª≠ l√Ω l·ªói khi k·∫øt n·ªëi th·∫•t b·∫°i
            _setConnectionStatus(false);
          },
          onStompError: (StompFrame frame) {
            print('üî¥ Stomp Error: ${frame.body}'); // X·ª≠ l√Ω l·ªói khi c√≥ l·ªói t·ª´ STOMP server
            _setConnectionStatus(false);
          },
          onDisconnect: (StompFrame frame) {
            print('üî¥ WebSocket Disconnected'); // X·ª≠ l√Ω khi WebSocket b·ªã ng·∫Øt k·∫øt n·ªëi
            _setConnectionStatus(false);
          },
          reconnectDelay: const Duration(seconds: 5), // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y n·∫øu b·ªã m·∫•t k·∫øt n·ªëi
        ),
      );

      stompClient.activate(); // K√≠ch ho·∫°t k·∫øt n·ªëi WebSocket
    }

    // H√†m x·ª≠ l√Ω khi k·∫øt n·ªëi WebSocket th√†nh c√¥ng
    void _onConnect(StompFrame frame) {
      print('üü¢ WebSocket Connected!');
      _setConnectionStatus(true);

      // ƒêƒÉng k√Ω (subscribe) v√†o k√™nh nh·∫≠n th√¥ng b√°o c·ªßa user
      stompClient.subscribe(
        destination: '/user/$userId/notifications/websocket', // K√™nh nh·∫≠n th√¥ng b√°o c·ªßa user
        callback: (StompFrame frame) {
          if (frame.body != null) {
            try {
              final Map<String, dynamic> data = jsonDecode(frame.body!); // Chuy·ªÉn ƒë·ªïi JSON th√†nh Map
              print('üì© Nh·∫≠n th√¥ng b√°o: $data');
              onMessageReceived(data); // G·ªçi callback khi nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn
            } catch (e) {
              print('‚ö†Ô∏è L·ªói gi·∫£i m√£ JSON: $e'); // B·∫Øt l·ªói n·∫øu JSON kh√¥ng h·ª£p l·ªá
            }
          }
        },
      );
      print("‚úÖ ƒê√£ subscribe v√†o k√™nh: /user/$userId/notifications/websocket");

      // G·ª≠i m·ªôt tin nh·∫Øn test ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi th√†nh c√¥ng
      stompClient.send(
        destination: '/app/notify', // K√™nh g·ª≠i tin nh·∫Øn
        body: jsonEncode({'message': 'Hello from Flutter'}), // D·ªØ li·ªáu g·ª≠i ƒëi
      );
    }

    // H√†m g·ª≠i tin nh·∫Øn qua WebSocket
    void sendMessage(String message) {
      stompClient.send(
        destination: '/app/notify', // K√™nh g·ª≠i tin nh·∫Øn
        body: jsonEncode({'message': message}), // D·ªØ li·ªáu g·ª≠i ƒëi d∆∞·ªõi d·∫°ng JSON
      );
    }

    // H√†m ƒë√≥ng k·∫øt n·ªëi WebSocket
    void disconnect() {
      stompClient.deactivate(); // H·ªßy k√≠ch ho·∫°t WebSocket
      _setConnectionStatus(false);
    }

    // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi v√† g·ªçi callback n·∫øu c√≥ s·ª± thay ƒë·ªïi
    void _setConnectionStatus(bool status) {
      if (_isConnected != status) {
        _isConnected = status;
        onConnectionChange(status); // G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t UI ho·∫∑c x·ª≠ l√Ω logic
      }
    }
  }
