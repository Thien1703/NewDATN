import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:health_care/services/local_storage_service.dart';
import 'package:health_care/services/websocket/websocket_manager.dart';
import 'package:health_care/services/websocket/websocket_service.dart';
import 'package:intl/intl.dart';

class NotificationScreen extends StatefulWidget {
  const NotificationScreen({super.key});

  @override
  State<NotificationScreen> createState() => _NotificationScreenState();
}

class _NotificationScreenState extends State<NotificationScreen> {
  late WebSocketService _webSocketService;
  List<Map<String, dynamic>> notifications = [];
  bool _isConnected = false;

  @override
  void initState() {
    super.initState();
    _loadSavedNotifications();

    // L·∫•y instance WebSocketService global
    _webSocketService = WebSocketManager.instance!;
    _isConnected = true; // ƒê√£ k·∫øt n·ªëi global ·ªü main.dart

    // G·∫Øn callback nh·∫≠n th√¥ng b√°o m·ªõi v√†o WebSocket global
    _webSocketService.onMessageReceived = (message) async {
      print("üì• JSON nh·∫≠n ƒë∆∞·ª£c: ${jsonEncode(message)}");

      final newNotification = {
        "type": message['type'],
        "message": message['message'],
        "appointment": message['appointment'],
        "time": DateFormat('HH:mm:ss dd/MM/yyyy').format(DateTime.now()),
      };

      setState(() {
        notifications.insert(0, newNotification);
      });

      print(
          "üü¢ Th√¥ng b√°o m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m. T·ªïng s·ªë hi·ªán t·∫°i: ${notifications.length}");

      await LocalStorageService.saveNotifications(notifications);

      _showSnackBar(message['message']);
    };

    // Theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi global
    _webSocketService.onConnectionChange = (bool isConnected) {
      print(
          isConnected ? "üü¢ WebSocket k·∫øt n·ªëi!" : "üî¥ WebSocket ng·∫Øt k·∫øt n·ªëi.");
      setState(() {
        _isConnected = isConnected;
      });
    };
  }

  Future<void> _loadSavedNotifications() async {
    final saved = await LocalStorageService.getSavedNotifications();
    setState(() {
      notifications = saved;
    });
    print("üì¶ ƒê√£ t·∫£i ${saved.length} th√¥ng b√°o t·ª´ local.");
  }

  void _showSnackBar(String message) {
    print("üç´ SnackBar: $message");
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), duration: const Duration(seconds: 3)),
    );
  }

  @override
  void dispose() {
    // KH√îNG disconnect ·ªü ƒë√¢y v√¨ WebSocket global
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Th√¥ng b√°o'),
        actions: [
          IconButton(
            icon: Icon(_isConnected ? Icons.wifi : Icons.wifi_off),
            color: _isConnected ? Colors.green : Colors.red,
            onPressed: () {},
          ),
        ],
      ),
      body: notifications.isEmpty
          ? const Center(child: Text("üì≠ Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng b√°o m·ªõi."))
          : ListView.builder(
              padding: const EdgeInsets.symmetric(vertical: 8),
              itemCount: notifications.length,
              itemBuilder: (context, index) {
                final item = notifications[index];
                final isNew = item["type"] == "NEW_APPOINTMENT";

                return Card(
                  margin:
                      const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  child: ListTile(
                    leading: CircleAvatar(
                      backgroundColor: isNew ? Colors.orange : Colors.green,
                      child: Icon(
                        isNew ? Icons.event_available : Icons.check_circle,
                        color: Colors.white,
                      ),
                    ),
                    title: Text(
                      'fsdfsfsdf ${item["message"] ?? ""}',
                      style: const TextStyle(fontWeight: FontWeight.w600),
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (item["appointment"] != null)
                          Text(
                              'fdfsdfs${_formatAppointment(item["appointment"])}'),
                        Text("üïíitee ${item["time"]}",
                            style: const TextStyle(fontSize: 12)),
                      ],
                    ),
                    onTap: () => _showDetails(item),
                  ),
                );
              },
            ),
    );
  }

  String _formatAppointment(Map<String, dynamic> appointment) {
    try {
      final clinic = appointment["clinic"]?["name"] ?? "Ph√≤ng kh√°m";
      final date =
          DateFormat('dd/MM/yyyy').format(DateTime.parse(appointment["date"]));
      final time = DateFormat('HH:mm')
          .format(DateTime.parse("1970-01-01 ${appointment["time"]}"));
      return "$clinic - $time ng√†y $date";
    } catch (e) {
      print("‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng l·ªãch h·∫πn: $e");
      return "";
    }
  }

  void _showDetails(Map<String, dynamic> notification) {
    final appointment = notification["appointment"];
    if (appointment == null) return;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(notification["message"] ?? "Chi ti·∫øt th√¥ng b√°o"),
        content: Text("""
üë§ Kh√°ch: ${appointment["customer"]?["fullName"] ?? "Kh√°ch h√†ng"}
üè• Ph√≤ng kh√°m: ${appointment["clinic"]?["name"] ?? "Ph√≤ng kh√°m"}
üóì Ng√†y kh√°m: ${appointment["date"]}
‚è∞ Gi·ªù: ${appointment["time"]}
        """),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("ƒê√≥ng"),
          )
        ],
      ),
    );
  }
}
