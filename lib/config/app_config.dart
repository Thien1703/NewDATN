import 'dart:convert';
import 'package:health_care/services/local_storage_service.dart';
import 'package:health_care/models/clinic.dart';
import 'package:http/http.dart' as http;

class AppConfig {
  static const String baseUrl = 'http://192.168.3.101:8080';

  // ƒêƒÉng nh·∫≠p
  static Future<String?> login(String phoneNumber, String password) async {
    final url = Uri.parse('$baseUrl/auth/login');
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'phoneNumber': phoneNumber, 'password': password}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 0 && data['data']['authenticated'] == true) {
        String token = data['data']['token'];
        await LocalStorageService.saveToken(token); // L∆∞u token
        return null; // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
      } else {
        return data['message'] ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.";
      }
    } else if (response.statusCode == 401) {
      return "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.";
    } else if (response.statusCode == 404) {
      return "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.";
    } else {
      return "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i!";
    }
  }

  // ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
  static Future<String?> register(
    String fullName,
    String phoneNumber,
    String password,
  ) async {
    final url = Uri.parse('$baseUrl/auth/register');
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'fullName': fullName,
        'phoneNumber': phoneNumber,
        'password': password,
      }),
    );

    final data = jsonDecode(response.body);

    if (response.statusCode == 200) {
      if (data['status'] == 0 && data['data']['authenticated'] == true) {
        String token = data['data']['token'];
        await LocalStorageService.saveToken(token); // L∆∞u token
        return null; // ƒêƒÉng k√Ω th√†nh c√¥ng
      } else {
        return data['message']; // L·ªói t·ª´ server
      }
    } else if (response.statusCode == 409) {
      return "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i";
    } else {
      return "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i!";
    }
  }

  // L·∫•y id h·ªì s∆° ng∆∞·ªùi d√πng
  static Future<int?> getMyUserId() async {
    final url = Uri.parse('$baseUrl/customer/get-my-info');
    String? token = await LocalStorageService.getToken();

    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 0) {
        int userId = data['data']['id'];
        return userId;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }

  // C·∫≠p nh·∫≠t h·ªì s∆°
  static Future<String?> updateProfile(Map<String, dynamic> profileData) async {
    final url = Uri.parse('$baseUrl/customer/update-by-id');
    String? token = await LocalStorageService.getToken();
    int? userId =
        await LocalStorageService.getUserId(); // üîπ L·∫•y userId t·ª´ local storage

    // üîπ Ki·ªÉm tra n·∫øu ch∆∞a c√≥ userId, l·∫•y t·ª´ API
    if (userId == null) {
      userId = await getMyUserId();
      if (userId != null) {
        await LocalStorageService.saveUserId(userId); // L∆∞u l·∫°i userId
      }
    }

    // üîπ N·∫øu v·∫´n kh√¥ng c√≥ ID, b√°o l·ªói
    if (userId == null) {
      return "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID ng∆∞·ªùi d√πng.";
    }

    // üîπ ƒê·∫£m b·∫£o `profileData` c√≥ ch·ª©a `id`
    profileData['id'] = userId;

    print("üìå G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t: ${jsonEncode(profileData)}");

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(profileData),
      );

      print("üìå Ph·∫£n h·ªìi t·ª´ server: ${response.statusCode} - ${response.body}");

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['status'] == 0) {
          return null; // ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng
        } else {
          return data['message'] ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.";
        }
      } else {
        return "L·ªói m√°y ch·ªß: ${response.body}";
      }
    } catch (e) {
      print("‚ùå L·ªói khi g·ªçi API: $e");
      return "L·ªói k·∫øt n·ªëi, vui l√≤ng th·ª≠ l·∫°i!";
    }
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  static Future<Map<String, dynamic>?> getUserProfile() async {
    final url = Uri.parse('$baseUrl/customer/get-my-info');
    String? token = await LocalStorageService.getToken();

    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 0) {
        int userId = data['data']['id']; // L·∫•y ID t·ª´ API
        await LocalStorageService.saveUserId(
          userId,
        ); // L∆∞u ID v√†o Local Storage
        await LocalStorageService.saveUserId(
          userId,
        ); // L∆∞u ID v√†o Local Storage
        return data['data']; // Tr·∫£ v·ªÅ d·ªØ li·ªáu h·ªì s∆°
      }
    }
    return null; // L·ªói ho·∫∑c kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu
  }

  // ƒêƒÉng xu·∫•t
  static Future<String?> logout() async {
    final url = Uri.parse('$baseUrl/auth/logout');

    // L·∫•y token t·ª´ local storage
    String? token = await LocalStorageService.getToken();
    if (token == null) {
      return "Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!";
    }

    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'token': token}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 0) {
        await LocalStorageService
            .logOut(); // X√≥a token sau khi logout th√†nh c√¥ng
        return null; // Logout th√†nh c√¥ng
      } else {
        return data['message'];
      }
    } else {
      return "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i!";
    }
  }

  //L·∫•y api c·ªßa ph√≤ng kh√°m
  static Future<List<Clinic>> getAllClinic() async {
    final url = Uri.parse('${baseUrl}/clinic/get-all');
    String? token = await LocalStorageService.getToken();
    if (token == null) {
      return [];
    }
    final response = await http.post(
      url,
      headers: {'Authorization': 'Bearer $token'},
    );
    print('Gi√° tr·ªã status c·ªßa API: ${response.statusCode}');
    print('Gi√° tr·ªã API tr·∫£ v·ªÅ body: ${response.body}');
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['status'] == 0) {
        List<Clinic> clinices = (data['data'] as List)
            .map((item) => Clinic.fromJson(item))
            .toList();
        return clinices;
      } else {
        print(' L·ªói t·ª´ API: ${data['message']}');
      }
    } else {
      print(' API l·ªói: ${response.statusCode}');
    }
    return [];
  }

  //L·∫•y api c·ªßa ph√≤ng kh√°m theo id
  static Future<Clinic?> getClinicById(int clinicId) async {
    final url = Uri.parse('$baseUrl/clinic/get-by-id');
    String? token = await LocalStorageService.getToken();

    if (token == null) return null;

    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({"id": clinicId}),
    );

    print('Gi√° tr·ªã status c·ªßa API: ${response.statusCode}');
    print('Gi√° tr·ªã API tr·∫£ v·ªÅ body: ${response.body}');

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      if (data['status'] == 0 && data['data'] != null) {
        return Clinic.fromJson(data['data']); // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng Clinic
      } else {
        print('L·ªói t·ª´ API: ${data['message']}');
      }
    } else {
      print('API l·ªói: ${response.statusCode}');
    }

    return null;
  }
}
