import 'package:health_care/models/appointment/appointmentOnline_Create.dart';
import 'package:health_care/models/appointment/bookingOnlineInfo.dart';
import 'package:health_care/models/appointment/statusAppointment.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:health_care/config/app_config.dart';
import 'package:health_care/models/appointment/appointment.dart';
import 'package:health_care/services/local_storage_service.dart';
import 'package:health_care/models/appointment/appointment_Create.dart';
import 'package:intl/intl.dart';

class AppointmentApi {
  //L·∫•y t·∫•t c·∫£ ƒë·∫∑t l·ªãch
  static Future<List<Appointment>?> getAllAppointment() async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/get-all');
    String? token = await LocalStorageService.getToken();
    if (token == null) {
      return null;
    }
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
    print('Gi√° tr·ªã status apptoinment: ${response.statusCode}');
    print('Gi√° tr·ªã api apptoinment: ${response.body}');
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['data'] is List) {
        List<Appointment> apptoinments = (data['data'] as List)
            .map((item) => Appointment.fromJson(item))
            .toList();
        return apptoinments;
      } else {
        print('L·ªói Api:${data['message']}');
      }
    } else {
      print('Api L·ªói: ${response.statusCode}');
    }
    return null;
  }

  //Xem ƒë·∫∑t l·ªãch theo id
  static Future<Appointment?> getAppointmentById(int appointmentId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/get-by-id');
    String? token = await LocalStorageService.getToken();
    if (token == null) {
      return null;
    }
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({
        'id': appointmentId,
      }),
    );
    print('Gi√° tr·ªã status apptoinment: ${response.statusCode}');
    print('Gi√° tr·ªã api apptoinment: ${response.body}');
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      if (data['data'] != null && data['data'] is Map) {
        return Appointment.fromJson(data['data']);
      } else {
        print('L·ªói Api:${data['message']}');
      }
    } else {
      print('Api L·ªói: ${response.statusCode}');
    }
    return null;
  }

  //Xem d·∫∑t l·ªãch theo customer ID
  static Future<List<Appointment>?> getAppointmentByCus(int customerId) async {
    try {
      final url = Uri.parse('${AppConfig.baseUrl}/appointment/get-by-customer');
      String? token = await LocalStorageService.getToken();
      if (token == null) {
        return null;
      }

      final response = await http.post(url,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          },
          body: jsonEncode({
            'customerId': customerId,
          }));

      print('üì¢ API Response Status: ${response.statusCode}');
      print('üì¢ API Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        if (data['data'] is List) {
          return (data['data'] as List)
              .map((item) => Appointment.fromJson(item))
              .toList();
        } else {
          print('‚ö† D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá: "data" kh√¥ng ph·∫£i danh s√°ch');
        }
      } else {
        print('‚ö† D·ªØ li·ªáu API kh√¥ng c√≥ key "data"');
      }
    } catch (e) {
      print('üö® L·ªói khi g·ªçi API: $e');
    }
    return null;
  }

  // ƒê·∫∑t l·ªãch
  static Future<int?> createAppointment(
      AppointmentCreate AppointmentCreate) async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/create');
    String? token = await LocalStorageService.getToken();

    if (token == null) {
      print("‚ùå Kh√¥ng t√¨m th·∫•y token!");
      return null;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(AppointmentCreate.toJson()),
      );
      print(
          "üì§ D·ªØ li·ªáu g·ª≠i l√™n APIz: ${jsonEncode(AppointmentCreate.toJson())}");

      print('üì© Ph·∫£n h·ªìi API (ƒê·∫∑t l·ªãch): ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        if (data['status'] == 0) {
          int appointmentId =
              data['data']['id']; // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ { "data": { "id": 123 } }
          return appointmentId;
        } else {
          print("‚ùå L·ªói API: ${data['message']}");
        }
      } else {
        print("‚ùå API tr·∫£ v·ªÅ l·ªói: ${response.statusCode}");
      }
    } catch (e) {
      print("‚ö† L·ªói h·ªá th·ªëng: $e");
    }
    return null; // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ null
  }

  //H·ªßy ƒë·∫∑t l·ªãch
  static Future<bool?> getCancelAppointment(int appointmentId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/cancel');
    String? token = await LocalStorageService.getToken();
    if (token == null) return null;
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({
        'id': appointmentId,
      }),
    );
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return data['status'] == 0;
    } else {
      print("L·ªói h·ªßy ƒë·∫∑t l·ªãch: ${response.body}");
    }
    return null;
  }

  // H·ªßy ƒë·∫∑t l·ªãch
  static Future<bool?> cancelAppointment(int appointmentId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/cancel');
    String? token = await LocalStorageService.getToken();
    if (token == null) return null;

    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode({'id': appointmentId}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      return data['status'] == 0;
    }
    return null;
  }

  // Ki·ªÉm tra slot tr·ªëng
  static Future<Map<String, int>> fetchAvailableSlots(
      int clinicId, DateTime date) async {
    try {
      final url =
          Uri.parse('${AppConfig.baseUrl}/appointment/check-available-slots');
      String? token = await LocalStorageService.getToken();
      if (token == null) {
        print('Error: Token is null');
        return {};
      }

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "date": DateFormat('yyyy-MM-dd').format(date),
          "clinicId": clinicId,
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['status'] == 0 && data['data'] != null) {
          Map<String, int> availableSlots = Map<String, int>.from(data['data']);
          return availableSlots;
        }
      }

      print('API Error: ${response.statusCode} - ${response.body}');
      return {}; // Tr·∫£ v·ªÅ danh s√°ch tr·ªëng n·∫øu c√≥ l·ªói
    } catch (e) {
      print('fetchAvailableSlots Error: $e');
      return {};
    }
  }

  //Update appointment
  static Future<bool> updateAppointment(
    int appointmentId,
    String cancelNote,
  ) async {
    final url = Uri.parse('${AppConfig.baseUrl}/appointment/update-by-id');
    String? token = await LocalStorageService.getToken();
    if (token == null) return false;

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'id': appointmentId,
          'status': 'CANCELLED',
          'cancelNote': cancelNote,
        }),
      );

      if (response.statusCode == 200) {
        return true; // Th√†nh c√¥ng
      } else {
        print('L·ªói: ${response.statusCode} - ${response.body}');
        return false; // L·ªói t·ª´ API
      }
    } catch (e) {
      print('L·ªói ngo·∫°i l·ªá: $e');
      return false; // L·ªói h·ªá th·ªëng
    }
  }

  //ƒë·∫∑t l·ªãch offline
  static Future<int?> getBooking(AppointmentCreate appointmentCreate) async {
    final url =
        Uri.parse('${AppConfig.baseUrl}/appointment/create-with-services');
    String? token = await LocalStorageService.getToken();

    if (token == null) {
      print('Kh√¥ng t√¨m th·∫•y token.');
      return null;
    }

    final body = json.encode(appointmentCreate.toJson());

    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: body,
    );

    print('Gi√° tr·ªã status code: ${response.statusCode}');
    print('Gi√° tr·ªã response body: ${response.body}');

    if (response.statusCode == 200) {
      final jsonBody = json.decode(response.body);
      if (jsonBody['status'] == 0) {
        return 0; // th√†nh c√¥ng
      } else {
        print('L·ªói t·ª´ API: ${jsonBody['message']}');
        return jsonBody['status']; // tr·∫£ l·ªói t·ª´ API
      }
    } else if (response.statusCode == 409) {
      return 409; // l·ªói d·ªãch v·ª• ƒë√£ ƒë·∫∑t r·ªìi
    } else {
      print('API L·ªói: ${response.statusCode}');
      return null; // l·ªói kh√¥ng x√°c ƒë·ªãnh
    }
  }

// ƒë·∫∑t l·ªãch online
  static Future<ApiResponse<BookingOnlineInfo?>> getBookingOnline(
      AppointmentCreateOnline appointmentCreateOnline) async {
    final url =
        Uri.parse('${AppConfig.baseUrl}/appointment/create-online-and-pay');
    String? token = await LocalStorageService.getToken();

    if (token == null) {
      print('‚ùå Kh√¥ng t√¨m th·∫•y token.');
      return ApiResponse(statusCode: 401, message: 'Kh√¥ng t√¨m th·∫•y token');
    }

    final body = json.encode(appointmentCreateOnline.toJson());

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: body,
      );

      print('üì© Status code: ${response.statusCode}');
      print('üì© Response body: ${response.body}');

      if (response.statusCode == 200) {
        final jsonBody = json.decode(response.body);
        if (jsonBody['status'] == 0) {
          final data = jsonBody['data'];
          return ApiResponse(
            statusCode: 200,
            data: BookingOnlineInfo.fromJson(data),
          );
        } else if (jsonBody['status'] == 409) {
          // X·ª≠ l√Ω ƒë·∫∑t l·ªãch tr√πng d·ªãch v·ª•
          return ApiResponse(
            statusCode: 409,
            message: jsonBody['message'] ?? 'B·∫°n ƒë√£ ƒë·∫∑t l·ªãch d·ªãch v·ª• n√†y r·ªìi.',
          );
        } else {
          return ApiResponse(
            statusCode: 400,
            message: jsonBody['message'] ?? 'ƒê·∫∑t l·ªãch th·∫•t b·∫°i',
          );
        }
      } else {
        return ApiResponse(
          statusCode: response.statusCode,
          message: 'L·ªói API: ${response.reasonPhrase}',
        );
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi API: $e');
      return ApiResponse(statusCode: 500, message: 'L·ªói k·∫øt n·ªëi t·ªõi m√°y ch·ªß');
    }
  }
}
