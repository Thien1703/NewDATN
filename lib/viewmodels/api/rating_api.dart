import 'package:health_care/config/app_config.dart';
import 'package:health_care/models/rating/rating.dart';
import 'package:health_care/services/local_storage_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class RatingApi {
  static Future<Rating?> writeApiRating(
    int appointmentId,
    int serviceId,
    int customerId,
    int stars,
    String? comment,
    String targetType, // Th√™m parameter targetType
  ) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rating/create');

    String? token = await LocalStorageService.getToken();
    if (token == null) {
      print('‚ùå Token kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    if (appointmentId <= 0 ||
        serviceId <= 0 ||
        customerId <= 0 ||
        stars < 1 ||
        stars > 5) {
      print('‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "appointmentId": appointmentId,
          "serviceId": serviceId,
          "customerId": customerId,
          "stars": stars,
          "comment": comment,
          "targetType": targetType, // Truy·ªÅn targetType t·ª´ ngo√†i v√†o
        }),
      );

      print('üì• API response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final Map<String, dynamic> responseBody = json.decode(response.body);

        // Ki·ªÉm tra n·∫øu tr·∫£ v·ªÅ d·ªØ li·ªáu trong tr∆∞·ªùng h·ª£p th√†nh c√¥ng
        if (responseBody.containsKey('data')) {
          // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu tr·∫£ v·ªÅ th√†nh ƒë·ªëi t∆∞·ª£ng Rating
          return Rating.fromJson(responseBody['data']);
        } else {
          print(
              '‚ö†Ô∏è Server tr·∫£ l·ªói: ${responseBody['message'] ?? "Kh√¥ng r√µ l√Ω do"}');
          return null;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('‚ùå Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói exception: $e');
      return null;
    }
  }

  static Future<Rating?> writeApiRatingDoctor(
    int appointmentId,
    int customerId,
    int stars,
    String? comment,
    String targetType, // Th√™m parameter targetType
    int?
        employeeId, // employeeId c√≥ th·ªÉ nullable, v√¨ c√≥ th·ªÉ kh√¥ng c√≥ trong tr∆∞·ªùng h·ª£p "SERVICE"
  ) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rating/create');

    String? token = await LocalStorageService.getToken();
    if (token == null) {
      print('‚ùå Token kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    if (appointmentId <= 0 || customerId <= 0 || stars < 1 || stars > 5) {
      print('‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    // T·∫°o body JSON v·ªõi c√°c tham s·ªë ƒë√£ thay ƒë·ªïi
    Map<String, dynamic> body = {
      "appointmentId": appointmentId,
      "customerId": customerId,
      "stars": stars,
      "comment": comment,
      "targetType": targetType,
    };

    // Ch·ªâ th√™m employeeId n·∫øu targetType l√† "DOCTOR"
    if (targetType == "DOCTOR" && employeeId != null) {
      body["employeeId"] = employeeId;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(body),
      );

      print('üì• API response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final Map<String, dynamic> responseBody = json.decode(response.body);

        // Ki·ªÉm tra n·∫øu tr·∫£ v·ªÅ d·ªØ li·ªáu trong tr∆∞·ªùng h·ª£p th√†nh c√¥ng
        if (responseBody.containsKey('data')) {
          // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu tr·∫£ v·ªÅ th√†nh ƒë·ªëi t∆∞·ª£ng Rating
          return Rating.fromJson(responseBody['data']);
        } else {
          print(
              '‚ö†Ô∏è Server tr·∫£ l·ªói: ${responseBody['message'] ?? "Kh√¥ng r√µ l√Ω do"}');
          return null;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('‚ùå Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói exception: $e');
      return null;
    }
  }

//L·∫•y danh s√°ch ƒë√°nh gi√° d·ªãch v·ª• theo cu·ªôc h·∫πn
  static Future<List<Rating>?> getRatingByAppointment(int appointmentId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rating/get-by-appointment');

    String? token = await LocalStorageService.getToken();
    if (token == null) {
      print('‚ùå Token kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "appointmentId": appointmentId,
        }),
      );

      print('üì• API response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseBody = json.decode(response.body);

        // Ki·ªÉm tra xem status c√≥ ph·∫£i l√† 0 v√† d·ªØ li·ªáu c√≥ d·∫°ng List kh√¥ng
        if (responseBody['status'] == 0 && responseBody['data'] is List) {
          List<dynamic> data = responseBody['data'];

          // Chuy·ªÉn ƒë·ªïi t·ª´ JSON th√†nh danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng Rating
          List<Rating> ratings =
              data.map((item) => Rating.fromJson(item)).toList();
          return ratings;
        } else {
          print('‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c status kh√¥ng ph·∫£i 0');
          return null;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('‚ùå Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói exception: $e');
      return null;
    }
  }

  static Future<List<Rating>?> getRatingByService(int serviceId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rating/get-by-service');

    String? token = await LocalStorageService.getToken();
    if (token == null) {
      print('‚ùå Token kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "serviceId": serviceId,
        }),
      );

      print('üì• API response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseBody = json.decode(response.body);

        if (responseBody['status'] == 0 && responseBody['data'] is List) {
          List<dynamic> data = responseBody['data'];
          List<Rating> ratings =
              data.map((item) => Rating.fromJson(item)).toList();
          return ratings;
        } else {
          print('‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c status kh√°c 0');
          return null;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('‚ùå Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói exception: $e');
      return null;
    }
  }

  static Future<List<Rating>?> getRatingByEmployee(int employeeId) async {
    final url = Uri.parse('${AppConfig.baseUrl}/rating/get-by-employee');

    String? token = await LocalStorageService.getToken();
    if (token == null) {
      print('‚ùå Token kh√¥ng h·ª£p l·ªá.');
      return null;
    }

    try {
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "employeeId": employeeId, // ‚úÖ S·ª≠a ƒë√∫ng key
        }),
      );

      print('üì• API response: ${response.statusCode} - ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['status'] == 0 && data['data'] != null) {
          List<dynamic> rawList = data['data'];
          return rawList.map((e) => Rating.fromJson(e)).toList();
        } else {
          print('‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ danh s√°ch h·ª£p l·ªá.');
          return null;
        }
      } else {
        print('‚ùå HTTP Error: ${response.statusCode}');
        print('‚ùå Response: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå L·ªói exception: $e');
      return null;
    }
  }
}
