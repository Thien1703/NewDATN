import 'dart:io';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:health_care/views/screens/auth/Login/newLogin.dart';
import '../services/local_storage_service.dart';
import '../views/screens/home/home_screens.dart';
import '../config/app_config.dart';

class AuthViewModel with ChangeNotifier {
  /// ƒêƒÉng nh·∫≠p
  Future<void> login(
      BuildContext context, String phoneNumber, String password) async {
    String? errorMessage = await AppConfig.login(phoneNumber, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      Fluttertoast.showToast(
        msg: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      // L·∫•y token ƒë√£ l∆∞u
      String? token = await LocalStorageService.getToken();
      print("Token ƒë√£ l∆∞u sau khi ƒëƒÉng nh·∫≠p: $token");

      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  /// ƒêƒÉng k√Ω + X√°c th·ª±c OTP
  Future<void> register(
    BuildContext context,
    String fullName,
    String phoneNumber,
    String email,
    String password,
  ) async {
    // G·ªçi API ƒëƒÉng k√Ω t·ª´ AppConfig
    String? errorMessage = await AppConfig.register(
        context, fullName, phoneNumber, email, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o OTP ƒë√£ g·ª≠i
      Fluttertoast.showToast(
        msg: "ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  // // Qu√™n m·∫≠t kh·∫©u ==> ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  // Future<void> forgotPassword(
  //   BuildContext context,
  //   String email,
  //   String newPassword,
  //   String confirmPassword,
  // ) async {
  //   // B∆∞·ªõc 1: G·ª≠i OTP t·ªõi email
  //   String? sendOtpError = await AppConfig.sendOtpForForgotPassword(email);

  //   if (!context.mounted) return;

  //   if (sendOtpError != null) {
  //     Fluttertoast.showToast(
  //       msg: sendOtpError,
  //       toastLength: Toast.LENGTH_SHORT,
  //       gravity: ToastGravity.BOTTOM,
  //       backgroundColor: Colors.red,
  //       textColor: Colors.white,
  //     );
  //     return;
  //   }

  //   Fluttertoast.showToast(
  //     msg: "ƒê√£ g·ª≠i m√£ OTP t·ªõi email.",
  //     toastLength: Toast.LENGTH_SHORT,
  //     gravity: ToastGravity.BOTTOM,
  //     backgroundColor: Colors.green,
  //     textColor: Colors.white,
  //   );

  //   // B∆∞·ªõc 2: Hi·ªÉn th·ªã dialog nh·∫≠p m√£ OTP
  //   final otp = await AppConfig.showOtpDialog(context);

  //   if (otp == null || otp.isEmpty) {
  //     Fluttertoast.showToast(
  //       msg: "X√°c th·ª±c OTP ƒë√£ b·ªã hu·ª∑.",
  //       toastLength: Toast.LENGTH_SHORT,
  //       gravity: ToastGravity.BOTTOM,
  //       backgroundColor: Colors.orange,
  //       textColor: Colors.white,
  //     );
  //     return;
  //   }

  //   // B∆∞·ªõc 3: X√°c th·ª±c OTP
  //   String? verifyError = await AppConfig.verifyForgotPasswordOtp(
  //     email: email,
  //     otp: otp,
  //   );

  //   if (verifyError != null) {
  //     Fluttertoast.showToast(
  //       msg: verifyError,
  //       toastLength: Toast.LENGTH_SHORT,
  //       gravity: ToastGravity.BOTTOM,
  //       backgroundColor: Colors.red,
  //       textColor: Colors.white,
  //     );
  //     return;
  //   }

  //   // B∆∞·ªõc 4: G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
  //   String? resetError = await AppConfig.resetPassword(
  //     email: email,
  //     otp: otp,
  //     newPassword: newPassword,
  //     confirmPassword: confirmPassword,
  //   );

  //   if (resetError == null) {
  //     Fluttertoast.showToast(
  //       msg: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!",
  //       toastLength: Toast.LENGTH_SHORT,
  //       gravity: ToastGravity.BOTTOM,
  //       backgroundColor: Colors.green,
  //       textColor: Colors.white,
  //     );

  //     // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
  //     Navigator.of(context).pushAndRemoveUntil(
  //       MaterialPageRoute(builder: (_) => LoginScreen()),
  //       (route) => false,
  //     );
  //   } else {
  //     Fluttertoast.showToast(
  //       msg: resetError,
  //       toastLength: Toast.LENGTH_SHORT,
  //       gravity: ToastGravity.BOTTOM,
  //       backgroundColor: Colors.red,
  //       textColor: Colors.white,
  //     );
  //   }
  // }

  /// C·∫≠p nh·∫≠t h·ªì s∆°
  Future<bool> updateProfile(BuildContext context,
      Map<String, dynamic> profileData, File? avatar) async {
    // üîπ L·∫•y userId t·ª´ local storage
    int? userId = await LocalStorageService.getUserId();

    // üîπ N·∫øu ch∆∞a c√≥, g·ªçi API l·∫•y userId
    if (userId == null) {
      userId = await AppConfig.getMyUserId();
      if (userId != null) {
        await LocalStorageService.saveUserId(userId); // L∆∞u l·∫°i ƒë·ªÉ d√πng sau
      }
    }

    // üîπ N·∫øu v·∫´n kh√¥ng c√≥ userId, b√°o l·ªói
    if (userId == null) {
      Fluttertoast.showToast(
        msg: "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID ng∆∞·ªùi d√πng.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }

    // üîπ ƒê·∫£m b·∫£o `profileData` c√≥ ch·ª©a `id`
    profileData['id'] = userId;

    String? errorMessage = await AppConfig.updateProfile(profileData);

    if (!context.mounted) return false;

    if (errorMessage == null) {
      Fluttertoast.showToast(
        msg: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      Navigator.pop(context); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
      return true; // ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }
  }

  /// Upload ·∫£nh ƒë·∫°i di·ªán
  Future<void> uploadAvatar(BuildContext context, File imageFile) async {
    int? userId = await LocalStorageService.getUserId();

    if (userId == null) {
      Fluttertoast.showToast(
        msg: "Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return;
    }

    // G·ªçi API upload
    String? result = await AppConfig.uploadAvatar(imageFile, userId);

    if (!context.mounted) return;

    if (result != null) {
      Fluttertoast.showToast(
        msg: "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      notifyListeners(); // C·∫≠p nh·∫≠t giao di·ªán
    } else {
      Fluttertoast.showToast(
        msg: "Upload ·∫£nh th·∫•t b·∫°i!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  /// ƒê·ªïi m·∫≠t kh·∫©u
  Future<void> changePassword(BuildContext context, String oldPassword,
      String newPassword, String confirmNewPassword) async {
    // L·∫•y token ng∆∞·ªùi d√πng t·ª´ local storage
    String? token = await LocalStorageService.getToken();
    int? customerId = await LocalStorageService.getUserId();

    if (token == null || customerId == null) {
      Fluttertoast.showToast(
        msg: "L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return;
    }

    // G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u
    String? errorMessage = await AppConfig.changePassword(
        customerId, oldPassword, newPassword, confirmNewPassword);

    if (!context.mounted) return;

    if (errorMessage == null) {
      Fluttertoast.showToast(
        msg: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      Navigator.pop(context); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  /// ƒêƒÉng xu·∫•t
  Future<void> signOut(BuildContext context) async {
    String? errorMessage = await AppConfig.logout();

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      print("Token ƒë√£ b·ªã x√≥a th√†nh c√¥ng!");
      await LocalStorageService.logOut(); // X√≥a token

      Fluttertoast.showToast(
        msg: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh Splash
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => LoginScreen()),
        (route) => false,
      );
    } else {
      Fluttertoast.showToast(
        msg: "L·ªói khi ƒëƒÉng xu·∫•t: $errorMessage",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }
}
