import 'dart:io';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:health_care/viewmodels/toast_helper.dart';
import 'package:health_care/views/screens/auth/Login/login_screen.dart';
import '../services/local_storage_service.dart';
import '../views/screens/home/home_screens.dart';
import '../config/app_config.dart';

class AuthViewModel with ChangeNotifier {
  /// ƒêƒÉng nh·∫≠p
  Future<void> login(
      BuildContext context, String phoneNumber, String password) async {
    String? errorMessage = await AppConfig.login(phoneNumber, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      showToastSuccess("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
      // L·∫•y token ƒë√£ l∆∞u
      String? token = await LocalStorageService.getToken();
      print("Token ƒë√£ l∆∞u sau khi ƒëƒÉng nh·∫≠p: $token");

      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      showToastError(errorMessage);
    }
  }

  /// ƒêƒÉng k√Ω + X√°c th·ª±c OTP
  Future<void> register(
    BuildContext context,
    String fullName,
    String phoneNumber,
    String email,
    String password,
  ) async {
    // G·ªçi API ƒëƒÉng k√Ω t·ª´ AppConfig
    String? errorMessage = await AppConfig.register(
        context, fullName, phoneNumber, email, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o OTP ƒë√£ g·ª≠i
      showToastSuccess("ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!");
      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      showToastError(errorMessage);
    }
  }

  /// Qu√™n m·∫≠t kh·∫©u: G·ª≠i OTP v√† x√°c th·ª±c
  Future<String?> forgotPassword(BuildContext context, String email) async {
    String? result = await AppConfig.forgotPassword(context, email);

    if (!context.mounted) return null;

    if (result == "cancelled") {
      Fluttertoast.showToast(
        msg: "B·∫°n ƒë√£ h·ªßy x√°c th·ª±c OTP.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.orange,
        textColor: Colors.white,
      );
      return null; // H·ªßy th√¨ kh√¥ng tr·∫£ v·ªÅ OTP
    } else if (result != null) {
      showToastSuccess("X√°c th·ª±c OTP th√†nh c√¥ng!");
      return result; // OTP h·ª£p l·ªá
    } else {
      showToastError("X√°c th·ª±c OTP th·∫•t b·∫°i!");
      return null;
    }
  }

  /// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
  Future<void> resetPassword(
    BuildContext context,
    String email,
    String otp,
    String newPassword,
    String confirmPassword,
  ) async {
    String? result = await AppConfig.resetPassword(
      email: email,
      otp: otp,
      newPassword: newPassword,
      confirmPassword: confirmPassword,
    );

    if (!context.mounted) return;

    if (result == null) {
      showToastSuccess("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");

      // Quay v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const LoginScreen()),
      );
    } else {
      showToastError(result);
    }
  }

  /// C·∫≠p nh·∫≠t h·ªì s∆°
  Future<bool> updateProfile(
      BuildContext context, Map<String, dynamic> profileData) async {
    // üîπ L·∫•y userId t·ª´ local storage
    int? userId = await LocalStorageService.getUserId();

    // üîπ N·∫øu ch∆∞a c√≥, g·ªçi API l·∫•y userId
    if (userId == null) {
      userId = await AppConfig.getMyUserId();
      if (userId != null) {
        await LocalStorageService.saveUserId(userId); // L∆∞u l·∫°i ƒë·ªÉ d√πng sau
      }
    }

    // üîπ N·∫øu v·∫´n kh√¥ng c√≥ userId, b√°o l·ªói
    if (userId == null) {
      showToastError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªì s∆°! Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc.");
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }

    // üîπ ƒê·∫£m b·∫£o `profileData` c√≥ ch·ª©a `id`
    profileData['id'] = userId;

    String? errorMessage = await AppConfig.updateProfile(profileData);

    if (!context.mounted) return false;

    if (errorMessage == null) {
      showToastSuccess("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
      Navigator.pop(context); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
      return true; // ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng
    } else {
      showToastError(errorMessage);
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }
  }

  /// Upload ·∫£nh ƒë·∫°i di·ªán
  Future<void> uploadAvatar(BuildContext context, File imageFile) async {
    int? userId = await LocalStorageService.getUserId();

    if (userId == null) {
      showToastError("Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      return;
    }

    // G·ªçi API upload
    String? result = await AppConfig.uploadAvatar(imageFile, userId);

    if (!context.mounted) return;

    if (result != null) {
      showToastSuccess("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!");
      notifyListeners(); // C·∫≠p nh·∫≠t giao di·ªán
    } else {
      showToastError("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  }

  /// ƒê·ªïi m·∫≠t kh·∫©u
  Future<void> changePassword(BuildContext context, String oldPassword,
      String newPassword, String confirmNewPassword) async {
    // L·∫•y token ng∆∞·ªùi d√πng t·ª´ local storage
    String? token = await LocalStorageService.getToken();
    int? customerId = await LocalStorageService.getUserId();

    if (token == null || customerId == null) {
      showToastError(
          "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      return;
    }

    // G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u
    String? errorMessage = await AppConfig.changePassword(
        customerId, oldPassword, newPassword, confirmNewPassword);

    if (!context.mounted) return;

    if (errorMessage == null) {
      showToastSuccess("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      Navigator.pop(context); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
    } else {
      showToastError(errorMessage);
    }
  }

  /// ƒêƒÉng xu·∫•t
  Future<void> signOut(BuildContext context) async {
    String? errorMessage = await AppConfig.logout();

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      print("Token ƒë√£ b·ªã x√≥a th√†nh c√¥ng!");
      await LocalStorageService.logOut(); // X√≥a token

      showToastSuccess("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh Splash
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => LoginScreen()),
        (route) => false,
      );
    } else {
      showToastError("L·ªói khi ƒëƒÉng xu·∫•t: $errorMessage");
    }
  }
}
