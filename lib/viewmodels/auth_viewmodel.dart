import 'dart:io';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:health_care/views/screens/auth/Login/newLogin.dart';
// import 'package:health_care/views/screens/auth/login/login_screen.dart';
import '../services/local_storage_service.dart';
import '../views/screens/home/home_screens.dart';
import '../config/app_config.dart';

class AuthViewModel with ChangeNotifier {
  /// ƒêƒÉng nh·∫≠p
  Future<void> login(
      BuildContext context, String phone, String password) async {
    String? errorMessage = await AppConfig.login(phone, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      Fluttertoast.showToast(
        msg: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      // L·∫•y token ƒë√£ l∆∞u
      String? token = await LocalStorageService.getToken();
      print("Token ƒë√£ l∆∞u sau khi ƒëƒÉng nh·∫≠p: $token");

      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  /// ƒêƒÉng k√Ω
  Future<void> register(BuildContext context, String fullName,
      String phoneNumber, String password) async {
    String? errorMessage =
        await AppConfig.register(fullName, phoneNumber, password);

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng
      Fluttertoast.showToast(
        msg: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      // L·∫•y token ƒë√£ l∆∞u
      String? token = await LocalStorageService.getToken();
      print("Token ƒë√£ l∆∞u sau khi ƒëƒÉng k√Ω: $token");

      // Chuy·ªÉn sang m√†n h√¨nh Home
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const HomeScreens()),
      );
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  /// C·∫≠p nh·∫≠t h·ªì s∆°
  Future<bool> updateProfile(BuildContext context,
      Map<String, dynamic> profileData, File? avatar) async {
    // üîπ L·∫•y userId t·ª´ local storage
    int? userId = await LocalStorageService.getUserId();

    // üîπ N·∫øu ch∆∞a c√≥, g·ªçi API l·∫•y userId
    if (userId == null) {
      userId = await AppConfig.getMyUserId();
      if (userId != null) {
        await LocalStorageService.saveUserId(userId); // L∆∞u l·∫°i ƒë·ªÉ d√πng sau
      }
    }

    // üîπ N·∫øu v·∫´n kh√¥ng c√≥ userId, b√°o l·ªói
    if (userId == null) {
      Fluttertoast.showToast(
        msg: "L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID ng∆∞·ªùi d√πng.",
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }

    // üîπ ƒê·∫£m b·∫£o `profileData` c√≥ ch·ª©a `id`
    profileData['id'] = userId;

    String? errorMessage = await AppConfig.updateProfile(profileData);

    if (!context.mounted) return false;

    if (errorMessage == null) {
      Fluttertoast.showToast(
        msg: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );
      Navigator.pop(context); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc ƒë√≥
      return true; // ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng
    } else {
      Fluttertoast.showToast(
        msg: errorMessage,
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
      return false; // ‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i
    }
  }

  /// ƒêƒÉng xu·∫•t
  Future<void> signOut(BuildContext context) async {
    String? errorMessage = await AppConfig.logout();

    if (!context.mounted) return; // üîπ Ki·ªÉm tra State c√≤n t·ªìn t·∫°i kh√¥ng

    if (errorMessage == null) {
      print("Token ƒë√£ b·ªã x√≥a th√†nh c√¥ng!");
      await LocalStorageService.logOut(); // X√≥a token

      Fluttertoast.showToast(
        msg: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.green,
        textColor: Colors.white,
      );

      // Chuy·ªÉn v·ªÅ m√†n h√¨nh Splash
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => LoginScreen()),
        (route) => false,
      );
    } else {
      Fluttertoast.showToast(
        msg: "L·ªói khi ƒëƒÉng xu·∫•t: $errorMessage",
        toastLength: Toast.LENGTH_LONG,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }
}
